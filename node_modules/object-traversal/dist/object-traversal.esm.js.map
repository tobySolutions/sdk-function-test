{"version":3,"file":"object-traversal.esm.js","sources":["../src/constants.ts","../src/queue.ts","../src/stack.ts","../src/traverse.ts","../src/get-node-by-path.ts"],"sourcesContent":["import { TraversalOpts } from './types';\n\nexport const DEFAULT_SEPARATOR = '.';\n\nexport const DEFAULT_TRAVERSAL_OPTS: Required<TraversalOpts> = {\n  traversalType: 'depth-first',\n  maxNodes: Number.POSITIVE_INFINITY,\n  cycleHandling: true,\n  maxDepth: Number.POSITIVE_INFINITY,\n  haltOnTruthy: false,\n  pathSeparator: DEFAULT_SEPARATOR,\n};\n","import { _Stack } from './stack';\n\nexport class _Queue<T = any> {\n  private head?: Node<T> = undefined;\n  private tail?: Node<T> = undefined;\n\n  enqueue(v: T): void {\n    if (this.tail) {\n      this.tail = this.tail.next = { value: v };\n    } else {\n      this.head = this.tail = { value: v };\n    }\n  }\n\n  dequeue(): T {\n    const previousHeadValue = this.head!.value;\n    this.head = this.head!.next;\n    if (!this.head) {\n      this.tail = this.head;\n    }\n    return previousHeadValue;\n  }\n\n  isEmpty(): boolean {\n    return !this.head;\n  }\n\n  reset(): void {\n    this.head = this.tail = undefined;\n  }\n}\n\nexport class _QueueToStackAdapter<T = any> implements _Stack<T> {\n  constructor(private queue: _Queue<T>) {}\n\n  push(v: T): void {\n    this.queue.enqueue(v);\n  }\n\n  pop(): T {\n    return this.queue.dequeue();\n  }\n\n  isEmpty(): boolean {\n    return this.queue.isEmpty();\n  }\n\n  reset(): void {\n    return this.queue.reset();\n  }\n}\n\ninterface Node<T> {\n  value: any;\n  next?: Node<T>;\n}\n","export class _Stack<T = any> {\n  private tail?: Node<T> = undefined;\n\n  push(v: T): void {\n    this.tail = { value: v, prev: this.tail };\n  }\n\n  pop(): T {\n    const node = this.tail;\n    this.tail = this.tail!.prev;\n    return node!.value;\n  }\n\n  isEmpty(): boolean {\n    return !this.tail;\n  }\n\n  reset(): void {\n    this.tail = undefined;\n  }\n}\n\ninterface Node<T> {\n  value: any;\n  prev?: Node<T>;\n}\n","import { DEFAULT_TRAVERSAL_OPTS } from './constants';\nimport { _Queue, _QueueToStackAdapter } from './queue';\nimport { _Stack } from './stack';\nimport {\n  ArbitraryObject,\n  FullTraversalOpts,\n  TraversalCallback,\n  TraversalCallbackContext,\n  TraversalMeta,\n  TraversalOpts,\n} from './types';\n\n/** Applies a given callback function to all properties of an object and its children */\nexport const traverse = (\n  root: ArbitraryObject,\n  callback: TraversalCallback,\n  opts?: TraversalOpts\n): void => {\n  if (!(root instanceof Object)) {\n    throw new Error('First argument must be an object');\n  }\n\n  const fullOpts = Object.assign(\n    {},\n    DEFAULT_TRAVERSAL_OPTS,\n    opts\n  ) as FullTraversalOpts;\n  fullOpts.disablePathTracking = typeof fullOpts.pathSeparator !== 'string';\n\n  let stackOrQueue: _Stack<TraversalCallbackContext>;\n  if (fullOpts.traversalType === 'depth-first') {\n    stackOrQueue = new _Stack();\n  } else {\n    stackOrQueue = new _QueueToStackAdapter(new _Queue());\n  }\n\n  const traversalMeta: TraversalMeta = {\n    visitedNodes: new WeakSet(),\n    depth: 0,\n  };\n  if (!fullOpts.disablePathTracking) {\n    traversalMeta.nodePath = null;\n  }\n\n  stackOrQueue.push({\n    parent: null,\n    key: null,\n    value: root,\n    meta: traversalMeta,\n  });\n\n  _traverse(callback, stackOrQueue, fullOpts);\n};\n\nconst _traverse = (\n  callback: TraversalCallback,\n  stackOrQueue: _Stack<TraversalCallbackContext>,\n  opts: FullTraversalOpts\n) => {\n  /**\n   * Using a stack instead of a queue to preserve the natural depth-first traversal order. Using a queue or traversing an array\n   *   in order would lead the depth-first to traverse the value.properties in reverse order.\n   * Breadth-first traversal uses queues as usual.\n   */\n  let newNodesToVisit: _Stack<TraversalCallbackContext>;\n  if (opts.traversalType === 'depth-first') {\n    newNodesToVisit = new _Stack();\n  } else {\n    newNodesToVisit = new _QueueToStackAdapter(new _Queue());\n  }\n\n  const {\n    maxNodes,\n    cycleHandling,\n    maxDepth,\n    haltOnTruthy,\n    pathSeparator,\n  } = opts;\n  let visitedNodeCount = 0;\n  while (!stackOrQueue.isEmpty() && maxNodes > visitedNodeCount) {\n    const callbackContext = stackOrQueue.pop()!;\n    const { value, meta } = callbackContext;\n    const { visitedNodes } = meta;\n    const nodeIsObject = value instanceof Object;\n\n    const skipNode = cycleHandling && nodeIsObject && visitedNodes.has(value);\n    if (skipNode) {\n      continue;\n    }\n\n    if (callback(callbackContext) && haltOnTruthy) {\n      break;\n    }\n    visitedNodeCount++;\n\n    if (nodeIsObject) {\n      visitedNodes.add(value);\n      const { depth, nodePath } = meta;\n      const newDepth = depth + 1;\n      if (newDepth > maxDepth) {\n        continue;\n      }\n\n      newNodesToVisit.reset();\n      const keys = Object.keys(value);\n      for (let i = 0; i < keys.length; i++) {\n        const property = keys[i];\n\n        const traversalMeta: TraversalMeta = {\n          visitedNodes,\n          depth: newDepth,\n        };\n\n        let newPath: string;\n        if (!opts.disablePathTracking) {\n          if (!nodePath) {\n            newPath = property;\n          } else {\n            newPath = `${nodePath}${pathSeparator}${property}`;\n          }\n\n          traversalMeta.nodePath = newPath;\n        }\n\n        newNodesToVisit.push({\n          value: value[property],\n          meta: traversalMeta,\n          key: property,\n          parent: value,\n        });\n      }\n\n      while (!newNodesToVisit.isEmpty()) {\n        stackOrQueue.push(newNodesToVisit.pop());\n      }\n    }\n  }\n};\n","import { DEFAULT_SEPARATOR } from './constants';\nimport { ArbitraryObject } from './types';\n\nexport function getNodeByPath(\n  root: ArbitraryObject,\n  path: string,\n  separator: string = DEFAULT_SEPARATOR\n): any {\n  let node: any = root;\n  const segments: string[] = path.split(separator);\n\n  let index = 0;\n  let segment = segments[index];\n  while (node && segment) {\n    node = node[segment];\n    segment = segments[++index];\n  }\n\n  return node;\n}\n"],"names":["DEFAULT_SEPARATOR","DEFAULT_TRAVERSAL_OPTS","traversalType","maxNodes","Number","POSITIVE_INFINITY","cycleHandling","maxDepth","haltOnTruthy","pathSeparator","_Queue","head","undefined","tail","enqueue","v","next","value","dequeue","previousHeadValue","isEmpty","reset","_QueueToStackAdapter","queue","push","pop","_Stack","prev","node","traverse","root","callback","opts","Object","Error","fullOpts","assign","disablePathTracking","stackOrQueue","traversalMeta","visitedNodes","WeakSet","depth","nodePath","parent","key","meta","_traverse","newNodesToVisit","visitedNodeCount","callbackContext","nodeIsObject","skipNode","has","add","newDepth","keys","i","length","property","newPath","getNodeByPath","path","separator","segments","split","index","segment"],"mappings":"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"}