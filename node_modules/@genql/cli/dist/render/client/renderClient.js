"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderClientEsm = void 0;
const config_1 = require("../../config");
const requestTypeName_1 = require("../requestTypes/requestTypeName");
const renderClientCode = (ctx) => {
    var _a, _b;
    const url = ((_a = ctx.config) === null || _a === void 0 ? void 0 : _a.endpoint) ? `"${ctx.config.endpoint}"` : 'undefined';
    const fetchImport = (_b = ctx.config) === null || _b === void 0 ? void 0 : _b.fetchImport;
    return `
function(options${url ? '?' : ''}: ClientOptions): Client {
  return createClientOriginal({
      url: ${url},
      ${fetchImport ? `fetch,` : ''}
      ...options,
      queryRoot: typeMap.Query!,
      mutationRoot: typeMap.Mutation!,
      subscriptionRoot: typeMap.Subscription!,
  }) as any
}`;
};
const renderClientEsm = (schema, ctx) => {
    var _a;
    const queryType = schema.getQueryType();
    const mutationType = schema.getMutationType();
    const subscriptionType = schema.getSubscriptionType();
    const fetchImport = ((_a = ctx.config) === null || _a === void 0 ? void 0 : _a.fetchImport) || '';
    ctx.addCodeBlock(`
${fetchImport}
${renderClientTypesImports({ mutationType, queryType, subscriptionType })}
  import { 
      linkTypeMap, 
      createClient as createClientOriginal, 
      generateGraphqlOperation,
      type FieldsSelection, type GraphqlOperation, type ClientOptions, GenqlError
  } from '${config_1.RUNTIME_LIB_NAME}'
  export type { FieldsSelection } from '${config_1.RUNTIME_LIB_NAME}'
  export { GenqlError }

  import types from './types'
  export * from './schema'
  const typeMap = linkTypeMap(types as any)

  ${renderClientType({ mutationType, queryType, subscriptionType })}

  export const createClient = ${renderClientCode(ctx)}

  export const everything = {
    __scalar: true
  }
  `);
    if (queryType) {
        ctx.addCodeBlock(`
        export type QueryResult<fields extends ${(0, requestTypeName_1.requestTypeName)(queryType)}> = FieldsSelection<${queryType.name}, fields>
        export const generateQueryOp: (fields: ${(0, requestTypeName_1.requestTypeName)(queryType)} & { __name?: string }) => GraphqlOperation = function(fields) {
        return generateGraphqlOperation('query', typeMap.Query!, fields as any)
      }
    `);
    }
    if (mutationType) {
        ctx.addCodeBlock(`
        export type MutationResult<fields extends ${(0, requestTypeName_1.requestTypeName)(mutationType)}> = FieldsSelection<${mutationType.name}, fields>
        export const generateMutationOp: (fields: ${(0, requestTypeName_1.requestTypeName)(mutationType)} & { __name?: string }) => GraphqlOperation = function(fields) {
        return generateGraphqlOperation('mutation', typeMap.Mutation!, fields as any)
      }
    `);
    }
    if (subscriptionType) {
        ctx.addCodeBlock(`
        export type SubscriptionResult<fields extends ${(0, requestTypeName_1.requestTypeName)(subscriptionType)}> = FieldsSelection<${subscriptionType.name}, fields>
        export const generateSubscriptionOp: (fields: ${(0, requestTypeName_1.requestTypeName)(subscriptionType)} & { __name?: string }) => GraphqlOperation = function(fields) {
        return generateGraphqlOperation('subscription', typeMap.Subscription!, fields as any)
      }
    `);
    }
};
exports.renderClientEsm = renderClientEsm;
function renderClientTypesImports({ queryType, mutationType, subscriptionType, }) {
    const imports = [];
    if (queryType) {
        imports.push((0, requestTypeName_1.requestTypeName)(queryType), queryType.name);
    }
    if (mutationType) {
        imports.push((0, requestTypeName_1.requestTypeName)(mutationType), mutationType.name);
    }
    if (subscriptionType) {
        imports.push((0, requestTypeName_1.requestTypeName)(subscriptionType), subscriptionType.name);
    }
    if (imports.length > 0) {
        return `import type {${imports.join(',')}} from './schema'`;
    }
    return '';
}
function renderClientType({ queryType, mutationType, subscriptionType }) {
    let interfaceContent = '';
    if (queryType) {
        interfaceContent += `
      query<R extends ${(0, requestTypeName_1.requestTypeName)(queryType)}>(
          request: R & { __name?: string },
      ): Promise<FieldsSelection<${queryType.name}, R>>
      `;
    }
    if (mutationType) {
        interfaceContent += `
      mutation<R extends ${(0, requestTypeName_1.requestTypeName)(mutationType)}>(
          request: R & { __name?: string },
      ): Promise<FieldsSelection<${mutationType.name}, R>>
      `;
    }
    // TODO add subscription client again
    // if (subscriptionType) {
    //     interfaceContent += `
    //   subscription<R extends ${requestTypeName(subscriptionType)}>(
    //       request: R & { __name?: string },
    //   ): Observable<FieldsSelection<${subscriptionType.name}, R>>
    //   `
    // }
    return `
  export interface Client {
      ${interfaceContent}
  }
  `;
}
//# sourceMappingURL=renderClient.js.map