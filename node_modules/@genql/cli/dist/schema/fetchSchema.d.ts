import { fetch } from 'native-fetch';
import { ExecutionResult } from 'graphql';
import { GraphQLSchemaValidationOptions } from 'graphql/type/schema';
import qs from 'qs';
export interface SchemaFetcher {
    (query: string, fetchImpl: typeof fetch, qsImpl: typeof qs): Promise<ExecutionResult>;
}
export declare const fetchSchema: ({ endpoint, usePost, headers, timeout, options, }: {
    endpoint: string;
    usePost?: boolean | undefined;
    timeout?: number | undefined;
    headers?: Record<string, string> | undefined;
    options?: GraphQLSchemaValidationOptions | undefined;
}) => Promise<import("graphql").GraphQLSchema>;
export declare function fetchSchemaWithRetry(args: Parameters<typeof fetchSchema>[0]): Promise<import("graphql").GraphQLSchema> | null;
//# sourceMappingURL=fetchSchema.d.ts.map