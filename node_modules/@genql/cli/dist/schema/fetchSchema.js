"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchSchemaWithRetry = exports.fetchSchema = void 0;
const native_fetch_1 = require("native-fetch");
const graphql_1 = require("graphql");
const qs_1 = __importDefault(require("qs"));
const fetchSchema = ({ endpoint, usePost = true, headers, timeout = 20 * 1000, options, }) => __awaiter(void 0, void 0, void 0, function* () {
    let controller = new AbortController();
    let id = setTimeout(() => {
        controller.abort();
    }, timeout);
    const response = yield (0, native_fetch_1.fetch)(usePost
        ? endpoint
        : `${endpoint}?${qs_1.default.stringify({ query: (0, graphql_1.getIntrospectionQuery)() })}`, Object.assign({ signal: controller.signal }, (usePost
        ? {
            method: usePost ? 'POST' : 'GET',
            body: JSON.stringify({ query: (0, graphql_1.getIntrospectionQuery)() }),
            headers: Object.assign(Object.assign({}, headers), { 'Content-Type': 'application/json' }),
        }
        : {
            headers,
        })));
    clearTimeout(id);
    if (!response.ok) {
        throw new Error(`introspection for ${endpoint} failed, ${response.status} ${response.statusText}`);
    }
    const result = yield response.json().catch((e) => {
        const contentType = response.headers.get('Content-Type');
        throw new Error(`endpoint '${endpoint}' did not return valid json, content type is ${contentType}, check that your endpoint points to a valid graphql api`);
    });
    if (!result.data) {
        throw new Error(`introspection for ${endpoint} failed: ${JSON.stringify(result).slice(0, 400)}...`);
    }
    // console.log(result.data)
    // console.log(JSON.stringify(result.data, null, 4))
    return (0, graphql_1.buildClientSchema)(result.data, options);
});
exports.fetchSchema = fetchSchema;
function fetchSchemaWithRetry(args) {
    for (let usePost of [true, false]) {
        try {
            return (0, exports.fetchSchema)(Object.assign(Object.assign({}, args), { usePost }));
        }
        catch (e) {
            console.log(e === null || e === void 0 ? void 0 : e['message']);
        }
    }
    return null;
}
exports.fetchSchemaWithRetry = fetchSchemaWithRetry;
//# sourceMappingURL=fetchSchema.js.map