"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFetcher = void 0;
const batcher_1 = require("./batcher");
const error_1 = require("./error");
const DEFAULT_BATCH_OPTIONS = {
    maxBatchSize: 10,
    batchInterval: 40,
};
const createFetcher = (_a) => {
    var { url, headers = {}, fetcher, fetch: _fetch, batch = false } = _a, rest = __rest(_a, ["url", "headers", "fetcher", "fetch", "batch"]);
    if (!url && !fetcher) {
        throw new Error('url or fetcher is required');
    }
    fetcher = fetcher || ((body) => __awaiter(void 0, void 0, void 0, function* () {
        let headersObject = typeof headers == 'function' ? yield headers() : headers;
        headersObject = headersObject || {};
        if (typeof fetch === 'undefined' && !_fetch) {
            throw new Error('Global `fetch` function is not available, pass a fetch polyfill to Genql `createClient`');
        }
        let fetchImpl = _fetch || fetch;
        const res = yield fetchImpl(url, Object.assign({ headers: Object.assign({ 'Content-Type': 'application/json' }, headersObject), method: 'POST', body: JSON.stringify(body) }, rest));
        if (!res.ok) {
            throw new Error(`${res.statusText}: ${yield res.text()}`);
        }
        const json = yield res.json();
        return json;
    }));
    if (!batch) {
        return (body) => __awaiter(void 0, void 0, void 0, function* () {
            var _b;
            const json = yield fetcher(body);
            if (Array.isArray(json)) {
                return json.map((json) => {
                    var _a;
                    if ((_a = json === null || json === void 0 ? void 0 : json.errors) === null || _a === void 0 ? void 0 : _a.length) {
                        throw new error_1.GenqlError(json.errors || [], json.data);
                    }
                    return json.data;
                });
            }
            else {
                if ((_b = json === null || json === void 0 ? void 0 : json.errors) === null || _b === void 0 ? void 0 : _b.length) {
                    throw new error_1.GenqlError(json.errors || [], json.data);
                }
                return json.data;
            }
        });
    }
    const batcher = new batcher_1.QueryBatcher((batchedQuery) => __awaiter(void 0, void 0, void 0, function* () {
        // console.log(batchedQuery) // [{ query: 'query{user{age}}', variables: {} }, ...]
        const json = yield fetcher(batchedQuery);
        return json;
    }), batch === true ? DEFAULT_BATCH_OPTIONS : batch);
    return ({ query, variables }) => __awaiter(void 0, void 0, void 0, function* () {
        const json = yield batcher.fetch(query, variables);
        if (json === null || json === void 0 ? void 0 : json.data) {
            return json.data;
        }
        throw new Error('Genql batch fetcher returned unexpected result ' + JSON.stringify(json));
    });
};
exports.createFetcher = createFetcher;
//# sourceMappingURL=fetcher.js.map