"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClient = void 0;
const fetcher_1 = require("./fetcher");
const generateGraphqlOperation_1 = require("./generateGraphqlOperation");
const createClient = (_a) => {
    var { queryRoot, mutationRoot, subscriptionRoot } = _a, options = __rest(_a, ["queryRoot", "mutationRoot", "subscriptionRoot"]);
    const fetcher = (0, fetcher_1.createFetcher)(options);
    const client = {};
    if (queryRoot) {
        client.query = (request) => {
            if (!queryRoot)
                throw new Error('queryRoot argument is missing');
            const resultPromise = fetcher((0, generateGraphqlOperation_1.generateGraphqlOperation)('query', queryRoot, request));
            return resultPromise;
        };
    }
    if (mutationRoot) {
        client.mutation = (request) => {
            if (!mutationRoot)
                throw new Error('mutationRoot argument is missing');
            const resultPromise = fetcher((0, generateGraphqlOperation_1.generateGraphqlOperation)('mutation', mutationRoot, request));
            return resultPromise;
        };
    }
    return client;
};
exports.createClient = createClient;
//# sourceMappingURL=createClient.js.map