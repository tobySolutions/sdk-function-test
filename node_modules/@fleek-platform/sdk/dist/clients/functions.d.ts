import { Client, FleekFunction as OriginalFleekFunction, FleekFunctionDeployment, FleekFunctionDeploymentGenqlSelection, FleekFunctionStatus } from '@fleek-platform/gql-client-utils';
type FunctionsClientOptions = {
    graphqlClient: Client;
};
export type FleekFunction = Omit<OriginalFleekFunction, 'projectId'>;
export type GetFleekFunctionArgs = {
    name: string;
};
export type CreateFleekFunctionArgs = {
    name: string;
};
export type DeleteFleekFunctionArgs = {
    id: string;
};
export type UpdateFleekFunctionArgs = {
    id: string;
    name?: string;
    slug?: string;
    status?: FleekFunctionStatus;
};
export type DeployFleekFunctionArgs = {
    functionId: string;
    cid: string;
    sgx?: boolean;
    blake3Hash?: string;
};
export type ListFleekFunctionArgs = {
    functionId: string;
};
export declare class FunctionsClient {
    private graphqlClient;
    private static Deployment_MAPPED_PROPERTIES;
    private static FleekFunction_MAPPED_PROPERTIES;
    constructor(options: FunctionsClientOptions);
    get: ({ name }: GetFleekFunctionArgs) => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/gql-client-utils").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "fleekFunctionId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        slug: string;
        status: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">>;
    list: () => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/gql-client-utils").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "fleekFunctionId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        slug: string;
        status: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">[]>;
    listDeployments: ({ functionId }: ListFleekFunctionArgs) => Promise<FleekFunctionDeployment[]>;
    create: ({ name }: CreateFleekFunctionArgs) => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/gql-client-utils").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "fleekFunctionId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        slug: string;
        status: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">>;
    deploy: ({ functionId, cid, sgx, blake3Hash }: DeployFleekFunctionArgs) => Promise<FleekFunctionDeployment>;
    delete: ({ id }: DeleteFleekFunctionArgs) => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/gql-client-utils").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "fleekFunctionId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        slug: string;
        status: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">>;
    update: ({ id, slug, name, status }: UpdateFleekFunctionArgs) => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/gql-client-utils").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "fleekFunctionId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        slug: string;
        status: import("@fleek-platform/gql-client-utils").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">>;
}
export {};
