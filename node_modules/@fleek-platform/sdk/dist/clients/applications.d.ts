import { Application as ApplicationWithRelations, Client } from '@fleek-platform/gql-client-utils';
export type Application = Omit<ApplicationWithRelations, '__typename' | 'whitelistDomains'> & {
    whitelistDomains: string[];
} & {
    whiteLabelDomains: string[];
};
type ApplicationsClientOptions = {
    graphqlClient: Client;
};
export type GetApplicationArgs = Pick<Application, 'id'>;
export type CreateApplicationArgs = Pick<Application, 'name' | 'whitelistDomains'>;
export type UpdateApplicationArgs = Pick<Application, 'id'> & Partial<Pick<Application, 'name' | 'whitelistDomains'>>;
export type DeleteApplicationArgs = Pick<Application, 'id'>;
export declare class ApplicationsClient {
    private graphqlClient;
    private static WHITE_LIST_DOMAIN_MAPPED_PROPERTIES;
    private static APPLICATION_MAPPED_PROPERTIES;
    constructor(options: ApplicationsClientOptions);
    get: ({ id }: GetApplicationArgs) => Promise<Pick<{
        clientId: string;
        createdAt: any;
        id: string;
        name: string;
        updatedAt: any;
        whiteLabelDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhiteLabelDomain";
        }, "id" | "hostname">[];
        whiteLabelDomainsPaginated: import("@fleek-platform/gql-client-utils").ApplicationWhiteLabelDomainsWithNestedAggregation;
        whitelistDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhitelistDomain";
        }, "id" | "hostname">[];
        __typename: "Application";
    }, "whitelistDomains" | "clientId" | "createdAt" | "id" | "name" | "updatedAt" | "whiteLabelDomains">>;
    list: () => Promise<Pick<{
        clientId: string;
        createdAt: any;
        id: string;
        name: string;
        updatedAt: any;
        whiteLabelDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhiteLabelDomain";
        }, "id" | "hostname">[];
        whiteLabelDomainsPaginated: import("@fleek-platform/gql-client-utils").ApplicationWhiteLabelDomainsWithNestedAggregation;
        whitelistDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhitelistDomain";
        }, "id" | "hostname">[];
        __typename: "Application";
    }, "whitelistDomains" | "clientId" | "createdAt" | "id" | "name" | "updatedAt" | "whiteLabelDomains">[]>;
    create: ({ name, whitelistDomains }: CreateApplicationArgs) => Promise<Pick<{
        clientId: string;
        createdAt: any;
        id: string;
        name: string;
        updatedAt: any;
        whiteLabelDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhiteLabelDomain";
        }, "id" | "hostname">[];
        whiteLabelDomainsPaginated: import("@fleek-platform/gql-client-utils").ApplicationWhiteLabelDomainsWithNestedAggregation;
        whitelistDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhitelistDomain";
        }, "id" | "hostname">[];
        __typename: "Application";
    }, "whitelistDomains" | "clientId" | "createdAt" | "id" | "name" | "updatedAt" | "whiteLabelDomains">>;
    update: ({ id, name, whitelistDomains }: UpdateApplicationArgs) => Promise<Pick<{
        clientId: string;
        createdAt: any;
        id: string;
        name: string;
        updatedAt: any;
        whiteLabelDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhiteLabelDomain";
        }, "id" | "hostname">[];
        whiteLabelDomainsPaginated: import("@fleek-platform/gql-client-utils").ApplicationWhiteLabelDomainsWithNestedAggregation;
        whitelistDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhitelistDomain";
        }, "id" | "hostname">[];
        __typename: "Application";
    }, "whitelistDomains" | "clientId" | "createdAt" | "id" | "name" | "updatedAt" | "whiteLabelDomains">>;
    delete: ({ id }: DeleteApplicationArgs) => Promise<Pick<{
        clientId: string;
        createdAt: any;
        id: string;
        name: string;
        updatedAt: any;
        whiteLabelDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhiteLabelDomain";
        }, "id" | "hostname">[];
        whiteLabelDomainsPaginated: import("@fleek-platform/gql-client-utils").ApplicationWhiteLabelDomainsWithNestedAggregation;
        whitelistDomains: Pick<{
            createdAt: any;
            hostname: string;
            id: string;
            updatedAt: any;
            __typename: "ApplicationWhitelistDomain";
        }, "id" | "hostname">[];
        __typename: "Application";
    }, "whitelistDomains" | "clientId" | "createdAt" | "id" | "name" | "updatedAt" | "whiteLabelDomains">>;
}
export {};
