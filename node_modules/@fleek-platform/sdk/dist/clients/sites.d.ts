import { Client, Deployment as DeploymentWithRelations, Domain as DomainWithRelations, Site as SiteWithRelations } from '@fleek-platform/gql-client-utils';
export type Deployment = Pick<DeploymentWithRelations, 'id' | 'status' | 'storageType' | 'siteId' | 'cid' | 'updatedAt' | 'createdAt'>;
export type Site = Pick<SiteWithRelations, 'id' | 'name' | 'slug'> & {
    ipnsRecords: Pick<SiteWithRelations['ipnsRecords'][number], 'id'>[];
    domains: Pick<SiteWithRelations['domains'][number], 'id' | 'hostname'>[];
    zones: Pick<SiteWithRelations['zones'][number], 'id' | 'status'>[];
    deployments: Deployment[];
    primaryDomain?: Pick<DomainWithRelations, 'id' | 'hostname'>;
};
type SitesClientOptions = {
    graphqlClient: Client;
};
export type GetSiteArgs = Pick<Site, 'id'>;
export type GetBySlugArgs = Pick<Site, 'slug'>;
export type CreateSiteArgs = Pick<Site, 'name'>;
export type DeleteSiteArgs = Pick<Site, 'id'>;
export type CreateCustomIpfsDeploymentArgs = Required<Pick<DeploymentWithRelations, 'siteId' | 'cid'>>;
export type GetDeploymentArgs = Pick<DeploymentWithRelations, 'id'>;
export declare class SitesClient {
    private graphqlClient;
    private static DEPLOYMENT_MAPPED_PROPERTIES;
    private static SITE_MAPPED_PROPERTIES;
    constructor(options: SitesClientOptions);
    get: ({ id }: GetSiteArgs) => Promise<Site>;
    getBySlug: ({ slug }: GetBySlugArgs) => Promise<Site>;
    list: () => Promise<Site[]>;
    create: ({ name }: CreateSiteArgs) => Promise<Site>;
    delete: ({ id }: DeleteSiteArgs) => Promise<Site>;
    createCustomIpfsDeployment: ({ siteId, cid }: CreateCustomIpfsDeploymentArgs) => Promise<Deployment>;
    getDeployment: ({ id }: GetDeploymentArgs) => Promise<Deployment>;
    private adapt;
}
export {};
