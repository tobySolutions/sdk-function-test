import type { CID, globSource } from 'ipfs-http-client';
import { AccessTokenService } from '../libs/AccessTokenService/AccessTokenService';
import { UploadProxyClient } from './uploadProxy';
export type IpfsFile = {
    path?: string;
    content: ArrayBuffer | string;
};
export type IpfsClientOptions = {
    uploadProxyClient: UploadProxyClient;
    ipfsStorageApiUrl: string;
    accessTokenService: AccessTokenService;
};
export type AddAllOptions = {
    basename?: string;
    wrapWithDirectory?: boolean;
    searchParams?: URLSearchParams;
};
export type AddFromPathOptions = {
    wrapWithDirectory?: boolean;
    searchParams?: URLSearchParams;
};
export type UploadResult = {
    cid: CID;
    size: number;
    path: string;
};
export declare class IpfsClient {
    private uploadProxyClient;
    private client?;
    private ipfsStorageApiUrl;
    private accessTokenService;
    constructor(options: IpfsClientOptions);
    private getClient;
    private pinToUploadResult;
    add: (file: IpfsFile) => Promise<UploadResult>;
    addAll: (files: Array<IpfsFile> | ReturnType<typeof globSource>, options?: AddAllOptions) => Promise<UploadResult[]>;
    addFromPath: (path: string, _options?: AddFromPathOptions) => Promise<Promise<{
        cid: CID;
        size: number;
        path: string;
    }>[]>;
    addSitesToIpfs: (path: string, options?: AddFromPathOptions) => Promise<UploadResult[]>;
}
