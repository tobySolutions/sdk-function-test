import { Client, IpnsRecord as IpnsRecordWithRelations } from '@fleek-platform/gql-client-utils';
type IpnsClientOptions = {
    graphqlClient: Client;
};
export type PublishRecordArgs = {
    id: string;
    hash: string;
};
export type ResolveNameArgs = {
    name: string;
};
export type CreateRecordForSiteArgs = {
    siteId: string;
};
export type DeleteRecordArgs = {
    id: string;
};
export type GetRecordArgs = {
    name: string;
};
export type PublishSignedNameArgs = {
    input: string;
    key: string;
};
export type IpnsRecord = Pick<IpnsRecordWithRelations, 'id' | 'name' | 'hash'> & {
    ensRecords: Pick<IpnsRecordWithRelations['ensRecords'][number], 'id'>[];
};
export declare class IpnsClient {
    private graphqlClient;
    private static RECORD_MAPPED_PROPERTIES;
    constructor(options: IpnsClientOptions);
    publishSignedName: ({ key, input }: PublishSignedNameArgs) => Promise<string>;
    resolveName: ({ name }: ResolveNameArgs) => Promise<string>;
    publishRecord: ({ hash, id }: PublishRecordArgs) => Promise<IpnsRecord>;
    createRecord: () => Promise<IpnsRecord>;
    createRecordForSite: ({ siteId }: CreateRecordForSiteArgs) => Promise<IpnsRecord>;
    deleteRecord: ({ id }: DeleteRecordArgs) => Promise<IpnsRecord>;
    listRecords: () => Promise<IpnsRecord[]>;
    getRecord: ({ name }: GetRecordArgs) => Promise<IpnsRecord>;
}
export {};
