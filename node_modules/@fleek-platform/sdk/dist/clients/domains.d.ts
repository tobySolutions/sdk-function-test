import { Client, Domain as DomainWithRelations, Zone as ZoneWithRelations, ZoneGenqlSelection } from '@fleek-platform/gql-client-utils';
type DomainsClientOptions = {
    graphqlClient: Client;
};
export type Domain = Pick<DomainWithRelations, 'id' | 'zone' | 'hostname' | 'isVerified' | 'updatedAt' | 'createdAt' | 'dnsConfigs' | 'status'>;
export type Zone = Pick<ZoneWithRelations, 'id' | 'originUrl' | 'createdAt' | 'updatedAt' | 'type' | 'status'>;
export declare class DomainsClient {
    private graphqlClient;
    private static DOMAIN_MAPPED_PROPERTIES;
    private static ZONE_MAPPED_PROPERTIES;
    constructor(options: DomainsClientOptions);
    list: () => Promise<DomainWithRelations[]>;
    get: ({ domainId }: {
        domainId: string;
    }) => Promise<DomainWithRelations>;
    getByHostname: ({ hostname }: {
        hostname: string;
    }) => Promise<DomainWithRelations>;
    listByZoneId: ({ zoneId }: {
        zoneId: string;
    }) => Promise<DomainWithRelations[]>;
    createDomain: ({ zoneId, hostname }: {
        zoneId: string;
        hostname: string;
    }) => Promise<Pick<{
        createdAt: any;
        dnsConfigs: import("@fleek-platform/gql-client-utils").DnsConfig[];
        dnslinkStatus: import("@fleek-platform/gql-client-utils").DnslinkStatus | null;
        errorMessage: string | null;
        hostname: string;
        id: string;
        isVerified: boolean;
        project: import("@fleek-platform/gql-client-utils").Project | null;
        status: import("@fleek-platform/gql-client-utils").DomainStatus;
        updatedAt: any;
        zone: ZoneWithRelations | null;
        __typename: "Domain";
    }, "__typename" | "createdAt" | "id" | "updatedAt" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified">>;
    deleteDomain: ({ domainId }: {
        domainId: string;
    }) => Promise<Pick<{
        createdAt: any;
        dnsConfigs: Pick<{
            createdAt: any;
            id: string;
            name: string;
            type: import("@fleek-platform/gql-client-utils").DnsConfigType;
            updatedAt: any;
            value: string;
            __typename: "DnsConfig";
        }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "type" | "value">[];
        dnslinkStatus: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").DnslinkStatus | null, number | boolean | undefined>;
        errorMessage: import("@fleek-platform/gql-client-utils").FieldsSelection<string | null, number | boolean | undefined>;
        hostname: string;
        id: string;
        isVerified: import("@fleek-platform/gql-client-utils").FieldsSelection<boolean, number | boolean | undefined>;
        project: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Project | null, import("@fleek-platform/gql-client-utils").ProjectGenqlSelection | undefined>;
        status: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").DomainStatus, number | boolean | undefined>;
        updatedAt: any;
        zone: import("@fleek-platform/gql-client-utils").FieldsSelection<ZoneWithRelations | null, ZoneGenqlSelection | undefined>;
        __typename: "Domain";
    }, "__typename" | "createdAt" | "id" | "updatedAt" | "project" | "zone" | "hostname" | "status" | "dnsConfigs" | "dnslinkStatus" | "errorMessage" | "isVerified">>;
    verifyDomain: ({ domainId }: {
        domainId: string;
    }) => Promise<Pick<{
        createdAt: any;
        dnsConfigs: Pick<{
            createdAt: any;
            id: string;
            name: string;
            type: import("@fleek-platform/gql-client-utils").DnsConfigType;
            updatedAt: any;
            value: string;
            __typename: "DnsConfig";
        }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "type" | "value">[];
        dnslinkStatus: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").DnslinkStatus | null, number | boolean | undefined>;
        errorMessage: import("@fleek-platform/gql-client-utils").FieldsSelection<string | null, number | boolean | undefined>;
        hostname: string;
        id: string;
        isVerified: import("@fleek-platform/gql-client-utils").FieldsSelection<boolean, number | boolean | undefined>;
        project: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Project | null, import("@fleek-platform/gql-client-utils").ProjectGenqlSelection | undefined>;
        status: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").DomainStatus, number | boolean | undefined>;
        updatedAt: any;
        zone: import("@fleek-platform/gql-client-utils").FieldsSelection<ZoneWithRelations | null, ZoneGenqlSelection | undefined>;
        __typename: "Domain";
    }, "__typename" | "createdAt" | "id" | "updatedAt" | "project" | "zone" | "hostname" | "status" | "dnsConfigs" | "dnslinkStatus" | "errorMessage" | "isVerified">>;
    listZones: () => Promise<Zone[]>;
    getZone: ({ id }: {
        id: string;
    }) => Promise<Zone>;
    createZoneForSite: ({ siteId }: {
        siteId: string;
    }) => Promise<Zone>;
    createZoneForPrivateGateway: () => Promise<Zone>;
    deleteZone: ({ id }: {
        id: string;
    }) => Promise<Zone>;
}
export {};
