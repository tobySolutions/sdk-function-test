import { Client, Project as ProjectWithRelations } from '@fleek-platform/gql-client-utils';
import { File } from '@web-std/file';
type ProjectsClientOptions = {
    graphqlClient: Client;
};
type CreateProjectArgs = {
    name: string;
};
type UpdateProjectArgs = {
    where: {
        id: string;
    };
    data: {
        name?: string;
        avatar?: typeof File['prototype'];
        backupStorageOnArweave?: boolean;
        backupStorageOnFilecoin?: boolean;
    };
};
type GetProjectArgs = {
    id: string;
};
export type Project = Omit<ProjectWithRelations, 'currentUserMembership' | 'memberships' | 'membershipsPaginated'>;
export declare class ProjectsClient {
    private graphqlClient;
    private static PROJECT_MAPPED_PROPERTIES;
    constructor(options: ProjectsClientOptions);
    create: ({ name }: CreateProjectArgs) => Promise<Project>;
    update: ({ where, data }: UpdateProjectArgs) => Promise<Project>;
    get: ({ id }: GetProjectArgs) => Promise<Project>;
    list: () => Promise<Project[]>;
}
export {};
