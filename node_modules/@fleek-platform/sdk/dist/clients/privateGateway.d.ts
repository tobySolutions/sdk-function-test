import { Client, PrivateGateway as PrivateGatewayWithRelations, Project } from '@fleek-platform/gql-client-utils';
type PrivateGatewayClientOptions = {
    graphqlClient: Client;
};
export type GetPrivateGatewayArgs = {
    id: string;
};
export type CreatePrivateGatewayArgs = {
    name: string;
    zoneId: string;
};
export type DeletePrivateGatewayArgs = {
    id: string;
};
export type UpdatePrivateGatewayArgs = {
    id: string;
    name: string;
};
export type GetPrivateGatewayBySlugArgs = {
    slug: string;
};
export type PrivateGateway = Omit<PrivateGatewayWithRelations, 'project' | 'domains' | 'domainsPaginated' | 'primaryDomain'> & {
    project: Pick<Project, 'id'>;
};
export declare class PrivateGatewayClient {
    private graphqlClient;
    private static PRIVATE_GATEWAY_MAPPED_PROPERTIES;
    constructor(options: PrivateGatewayClientOptions);
    get: ({ id }: GetPrivateGatewayArgs) => Promise<PrivateGatewayWithRelations>;
    getBySlug: ({ slug }: GetPrivateGatewayBySlugArgs) => Promise<PrivateGatewayWithRelations>;
    list: () => Promise<PrivateGatewayWithRelations[]>;
    create: ({ name, zoneId }: CreatePrivateGatewayArgs) => Promise<Pick<{
        createdAt: any;
        domains: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleek-platform/gql-client-utils").DnsConfig[];
            dnslinkStatus: import("@fleek-platform/gql-client-utils").DnslinkStatus | null;
            errorMessage: string | null;
            hostname: string;
            id: string;
            isVerified: boolean;
            project: Project | null;
            status: import("@fleek-platform/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone: import("@fleek-platform/gql-client-utils").Zone | null;
            __typename: "Domain";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified">[];
        domainsPaginated: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").DomainsWithNestedAggregation | null, (import("@fleek-platform/gql-client-utils").DomainsWithNestedAggregationGenqlSelection & {
            __args?: {
                filter?: import("@fleek-platform/gql-client-utils").PaginationInput | null | undefined;
            } | undefined;
        }) | undefined>;
        id: string;
        name: string;
        primaryDomain: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Domain | null, import("@fleek-platform/gql-client-utils").DomainGenqlSelection | undefined>;
        project: Pick<{
            allowAccessFromOfacCountries: boolean | null;
            avatar: any;
            backupStorageOnArweave: boolean | null;
            backupStorageOnFilecoin: boolean | null;
            createdAt: any;
            currentUserMembership: import("@fleek-platform/gql-client-utils").Membership;
            id: string;
            memberships: import("@fleek-platform/gql-client-utils").Membership[];
            membershipsPaginated: import("@fleek-platform/gql-client-utils").MembershipsWithNestedAggregation;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "avatar" | "allowAccessFromOfacCountries" | "backupStorageOnArweave" | "backupStorageOnFilecoin">;
        slug: string;
        updatedAt: any;
        zone: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Zone | null, import("@fleek-platform/gql-client-utils").ZoneGenqlSelection | undefined>;
        __typename: "PrivateGateway";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "domains" | "project" | "zone" | "primaryDomain" | "slug" | "domainsPaginated">>;
    delete: ({ id }: DeletePrivateGatewayArgs) => Promise<Pick<{
        createdAt: any;
        domains: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleek-platform/gql-client-utils").DnsConfig[];
            dnslinkStatus: import("@fleek-platform/gql-client-utils").DnslinkStatus | null;
            errorMessage: string | null;
            hostname: string;
            id: string;
            isVerified: boolean;
            project: Project | null;
            status: import("@fleek-platform/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone: import("@fleek-platform/gql-client-utils").Zone | null;
            __typename: "Domain";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified">[];
        domainsPaginated: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").DomainsWithNestedAggregation | null, (import("@fleek-platform/gql-client-utils").DomainsWithNestedAggregationGenqlSelection & {
            __args?: {
                filter?: import("@fleek-platform/gql-client-utils").PaginationInput | null | undefined;
            } | undefined;
        }) | undefined>;
        id: string;
        name: string;
        primaryDomain: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Domain | null, import("@fleek-platform/gql-client-utils").DomainGenqlSelection | undefined>;
        project: Pick<{
            allowAccessFromOfacCountries: boolean | null;
            avatar: any;
            backupStorageOnArweave: boolean | null;
            backupStorageOnFilecoin: boolean | null;
            createdAt: any;
            currentUserMembership: import("@fleek-platform/gql-client-utils").Membership;
            id: string;
            memberships: import("@fleek-platform/gql-client-utils").Membership[];
            membershipsPaginated: import("@fleek-platform/gql-client-utils").MembershipsWithNestedAggregation;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "avatar" | "allowAccessFromOfacCountries" | "backupStorageOnArweave" | "backupStorageOnFilecoin">;
        slug: string;
        updatedAt: any;
        zone: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Zone | null, import("@fleek-platform/gql-client-utils").ZoneGenqlSelection | undefined>;
        __typename: "PrivateGateway";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "domains" | "project" | "zone" | "primaryDomain" | "slug" | "domainsPaginated">>;
    update: ({ id, name }: UpdatePrivateGatewayArgs) => Promise<Pick<{
        createdAt: any;
        domains: Pick<{
            createdAt: any;
            dnsConfigs: import("@fleek-platform/gql-client-utils").DnsConfig[];
            dnslinkStatus: import("@fleek-platform/gql-client-utils").DnslinkStatus | null;
            errorMessage: string | null;
            hostname: string;
            id: string;
            isVerified: boolean;
            project: Project | null;
            status: import("@fleek-platform/gql-client-utils").DomainStatus;
            updatedAt: any;
            zone: import("@fleek-platform/gql-client-utils").Zone | null;
            __typename: "Domain";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "hostname" | "status" | "dnslinkStatus" | "errorMessage" | "isVerified">[];
        domainsPaginated: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").DomainsWithNestedAggregation | null, (import("@fleek-platform/gql-client-utils").DomainsWithNestedAggregationGenqlSelection & {
            __args?: {
                filter?: import("@fleek-platform/gql-client-utils").PaginationInput | null | undefined;
            } | undefined;
        }) | undefined>;
        id: string;
        name: string;
        primaryDomain: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Domain | null, import("@fleek-platform/gql-client-utils").DomainGenqlSelection | undefined>;
        project: Pick<{
            allowAccessFromOfacCountries: boolean | null;
            avatar: any;
            backupStorageOnArweave: boolean | null;
            backupStorageOnFilecoin: boolean | null;
            createdAt: any;
            currentUserMembership: import("@fleek-platform/gql-client-utils").Membership;
            id: string;
            memberships: import("@fleek-platform/gql-client-utils").Membership[];
            membershipsPaginated: import("@fleek-platform/gql-client-utils").MembershipsWithNestedAggregation;
            name: string;
            updatedAt: any;
            __typename: "Project";
        }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "avatar" | "allowAccessFromOfacCountries" | "backupStorageOnArweave" | "backupStorageOnFilecoin">;
        slug: string;
        updatedAt: any;
        zone: import("@fleek-platform/gql-client-utils").FieldsSelection<import("@fleek-platform/gql-client-utils").Zone | null, import("@fleek-platform/gql-client-utils").ZoneGenqlSelection | undefined>;
        __typename: "PrivateGateway";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "domains" | "project" | "zone" | "primaryDomain" | "slug" | "domainsPaginated">>;
}
export {};
