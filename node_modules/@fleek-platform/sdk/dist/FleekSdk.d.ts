import { ApplicationsClient } from './clients/applications';
import { DomainsClient } from './clients/domains';
import { EnsClient } from './clients/ens';
import { FunctionsClient } from './clients/functions';
import { IpfsClient } from './clients/ipfs';
import { IpnsClient } from './clients/ipns';
import { PrivateGatewayClient } from './clients/privateGateway';
import { ProjectsClient } from './clients/projects';
import { SitesClient } from './clients/sites';
import { StorageClient } from './clients/storage';
import { UserClient } from './clients/user';
import { AccessTokenService } from './libs/AccessTokenService/AccessTokenService';
type FleekSdkOptions = {
    projectId?: string | undefined;
    graphqlServiceApiUrl?: string;
    ipfsStorageApiUrl?: string;
    uploadProxyApiUrl?: string;
    accessTokenService: AccessTokenService;
};
export declare class FleekSdk {
    private accessTokenService;
    private graphqlClient;
    private uploadProxyClient;
    private userClient?;
    private projectsClient?;
    private ipnsClient?;
    private sitesClient?;
    private domainsClient?;
    private applicationsClient?;
    private privateGatewayClient?;
    private ensClient?;
    private storageClient?;
    private uploadProxyApiUrl;
    private graphqlServiceApiUrl;
    private ipfsClient?;
    private ipfsStorageApiUrl;
    private functionsClient?;
    constructor({ graphqlServiceApiUrl, ipfsStorageApiUrl, uploadProxyApiUrl, accessTokenService, }: FleekSdkOptions);
    getVersion: () => Promise<Pick<{
        application: import("@fleek-platform/gql-client-utils").Application;
        applicationNameAvailability: boolean;
        applications: import("@fleek-platform/gql-client-utils").ApplicationsWithAggregation;
        billingCycleUsages: import("@fleek-platform/gql-client-utils").BillingCycleUsagesWithAggregation;
        billingPlan: import("@fleek-platform/gql-client-utils").BillingPlan;
        billingPlans: import("@fleek-platform/gql-client-utils").BillingPlansWithAggregation;
        deployment: import("@fleek-platform/gql-client-utils").Deployment;
        deployments: import("@fleek-platform/gql-client-utils").DeploymentsWithAggregation;
        deploymentsQueueLimit: boolean;
        domain: import("@fleek-platform/gql-client-utils").Domain;
        domainAvailability: boolean;
        domainByHostname: import("@fleek-platform/gql-client-utils").Domain;
        domains: import("@fleek-platform/gql-client-utils").DomainsWithAggregation;
        domainsByZoneId: import("@fleek-platform/gql-client-utils").DomainsByZoneIdWithAggregation;
        emailAvailability: boolean;
        ensNameAvailability: boolean;
        ensRecord: import("@fleek-platform/gql-client-utils").EnsRecord;
        ensRecordByName: import("@fleek-platform/gql-client-utils").EnsRecord;
        ensRecords: import("@fleek-platform/gql-client-utils").EnsRecordsWithAggregation;
        ensRecordsByIpnsId: import("@fleek-platform/gql-client-utils").EnsRecordsByIpnsIdWithAggregation;
        filecoinDeals: import("@fleek-platform/gql-client-utils").FilecoinDealsWithAggregation;
        fleekFunctionByName: import("@fleek-platform/gql-client-utils").FleekFunction;
        fleekFunctionDeployment: import("@fleek-platform/gql-client-utils").FleekFunctionDeployment;
        fleekFunctionDeployments: import("@fleek-platform/gql-client-utils").FleekFunctionDeploymentsWithAggregation;
        fleekFunctions: import("@fleek-platform/gql-client-utils").FleekFunctionsWithAggregation;
        folder: import("@fleek-platform/gql-client-utils").Folder;
        gitApiBranches: import("@fleek-platform/gql-client-utils").GitApiBranch[];
        gitApiInstallations: import("@fleek-platform/gql-client-utils").GitApiInsatallation[];
        gitApiIsRepoNameAvailable: boolean;
        gitApiTree: import("@fleek-platform/gql-client-utils").GitApiTree[];
        gitIntegration: import("@fleek-platform/gql-client-utils").GitIntegration;
        gitProvider: import("@fleek-platform/gql-client-utils").GitProvider;
        gitProviders: import("@fleek-platform/gql-client-utils").GitProvider[];
        githubAppInstallations: import("@fleek-platform/gql-client-utils").GithubAppInstallation[];
        invitation: import("@fleek-platform/gql-client-utils").InvitationDetail;
        invitations: import("@fleek-platform/gql-client-utils").InvitationsWithAggregation;
        ipnsRecord: import("@fleek-platform/gql-client-utils").IpnsRecord;
        ipnsRecords: import("@fleek-platform/gql-client-utils").IpnsRecordsWithAggregation;
        listDeploymentBranches: string[];
        listFolder: import("@fleek-platform/gql-client-utils").ListFolderWithAggregation;
        migrationRequest: import("@fleek-platform/gql-client-utils").MigrationRequest;
        migrationRequests: import("@fleek-platform/gql-client-utils").MigrationRequestsWithAggregation;
        migrationRequestsByToken: import("@fleek-platform/gql-client-utils").MigrationRequest[];
        migrationScheduledRequest: import("@fleek-platform/gql-client-utils").MigrationScheduledRequest | null;
        migrationStatusByTeamId: import("@fleek-platform/gql-client-utils").MigrationStatus | null;
        migrationTeamInfosFromToken: import("@fleek-platform/gql-client-utils").MigrationTeamInfo[];
        notificationSettings: import("@fleek-platform/gql-client-utils").NotificationSettings[];
        notifications: import("@fleek-platform/gql-client-utils").NotificationsWithAggregation;
        permissionGroups: import("@fleek-platform/gql-client-utils").PermissionGroupsWithAggregation;
        personalAccessTokens: import("@fleek-platform/gql-client-utils").PersonalAccessTokensWithAggregation;
        pin: import("@fleek-platform/gql-client-utils").Pin;
        pinNameAvailabilityInParentFolder: boolean;
        pins: import("@fleek-platform/gql-client-utils").PinsWithAggregation;
        pinsByFilename: import("@fleek-platform/gql-client-utils").PinsByFilenameWithAggregation;
        privateGateway: import("@fleek-platform/gql-client-utils").PrivateGateway;
        privateGatewayBySlug: import("@fleek-platform/gql-client-utils").PrivateGateway;
        privateGatewayNameAvailability: boolean;
        privateGateways: import("@fleek-platform/gql-client-utils").PrivateGatewaysWithAggregation;
        project: import("@fleek-platform/gql-client-utils").Project;
        projects: import("@fleek-platform/gql-client-utils").ProjectsWithAggregation;
        resolveIpnsName: string;
        secretAvailability: boolean;
        site: import("@fleek-platform/gql-client-utils").Site;
        siteBuildSettings: import("@fleek-platform/gql-client-utils").SiteBuildSettings;
        siteBySlug: import("@fleek-platform/gql-client-utils").Site;
        siteFramework: import("@fleek-platform/gql-client-utils").SiteFramework;
        siteFrameworks: import("@fleek-platform/gql-client-utils").SiteFramework[];
        siteNameAvailability: boolean;
        sites: import("@fleek-platform/gql-client-utils").SitesWithAggregation;
        slugAvailability: boolean;
        template: import("@fleek-platform/gql-client-utils").Template;
        templateCategories: import("@fleek-platform/gql-client-utils").TemplateCategoriesWithAggregation;
        templateCategory: import("@fleek-platform/gql-client-utils").TemplateCategory;
        templateNameAvailability: boolean;
        templates: import("@fleek-platform/gql-client-utils").TemplatesWithAggregation;
        twoFactorProtectedActions: import("@fleek-platform/gql-client-utils").TwoFactorProtectedActionsWithAggregation;
        user: import("@fleek-platform/gql-client-utils").User;
        usernameAvailability: boolean;
        version: Pick<{
            commitHash: string;
            __typename: "Version";
        }, "__typename" | "commitHash">;
        zone: import("@fleek-platform/gql-client-utils").Zone;
        zones: import("@fleek-platform/gql-client-utils").ZonesWithAggregation;
        __typename: "Query";
    }, "version">>;
    user: () => UserClient;
    ipns: () => IpnsClient;
    ipfs: () => IpfsClient;
    sites: () => SitesClient;
    projects: () => ProjectsClient;
    domains: () => DomainsClient;
    applications: () => ApplicationsClient;
    ens: () => EnsClient;
    privateGateways: () => PrivateGatewayClient;
    storage: () => StorageClient;
    functions: () => FunctionsClient;
    private getAuthenticationHeaders;
    private getCustomHeaders;
}
export {};
